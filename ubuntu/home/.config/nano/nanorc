## Initialization file for GNU nano
##
## For the options that take parameters, the default value is shown.
## Other options are unset by default.  To make sure that an option
## is disabled, you can use "unset <option>".
##
## Characters that are special in a shell should not be escaped here.
## Inside string parameters, quotes should not be escaped -- the last
## double quote on the line will be seen as the closing quote.

## =============================================================================
## OPTIONS
## =============================================================================

## Make 'nextword' (Ctrl+Right) and 'chopwordright' (Ctrl+Delete)
##     stop at word ends instead of at beginnings.
# set afterends

## Automatically indent a newly created line to the same number of tabs and/or
##     spaces as the preceding line -- or as the next line
##     if the preceding line is the beginning of a paragraph.
set autoindent

## When justifying, treat any line that starts with whitespace as
##     the beginning of a paragraph (unless auto-indenting is on).
# set bookstyle

## The characters treated as closing brackets when justifying paragraphs.
## This may not include any blank characters.
## Only closing punctuation (see set punct), optionally followed by
##     these closing brackets, can end sentences.
## The default value is ""’)>]}".
# set brackets "characters"
# set brackets ""')>]}"

## Constantly display the cursor position in the status bar or minibar.
## This overrides the option quickblank.
# set constantshow

## Use cut-from-cursor-to-end-of-line by default,
##     instead of cutting the whole line.
# set cutfromcursor

## Do not use the line below the title bar, leaving it entirely blank.
# set emptyline

## Draw a vertical stripe at the given column, to help judge text width.
## (The color of the stripe can be changed with set stripecolor.)
## (This option does not have a default value.)
# set guidestripe number
# set guidestripe 75
set guidestripe 80

## Save the last hundred search strings and replacement strings
##     and executed commands, so they can be easily reused in later sessions.
set historylog

## Display a "scrollbar" on the righthand side of the edit window.
## It shows the position of the viewport in the buffer and how much
##     of the buffer is covered by the viewport.
set indicator

## Scroll the buffer contents per half-screen instead of per line.
# set jumpyscrolling

## Display line numbers to the left of the text area.
## (Any line with an anchor additionally gets a mark in the margin.)
set linenumbers

## Enable vim-style lock-files.
## This is just to let a vim user know you are editing a file [s]he is trying
##     to edit and vice versa.
## There are no plans to implement vim-style undo state in these files.
set locking

## Fall back to slow libmagic to try and determine an applicable syntax.
## When neither the file’s name nor its first line give a clue, try using
##     libmagic to determine the applicable syntax.
## (Calling libmagic can be relatively time consuming.
##     It is therefore not done by default.)
# set magic

## The opening and closing brackets that are found by a matching-bracket search.
## This may not contain blank characters.
## The opening set must come before the closing set,
##     and the two sets must be in the same order.
# set matchbrackets "characters"
# set matchbrackets "(<[{)>]}"

## Suppress the title bar and instead show information about the current buffer
##     at the bottom of the screen, in the space for the status bar.
## In this "minibar" the filename is shown on the left, followed by an asterisk
##     if the buffer has been modified.
## On the right are displayed the current line and column number, the code of
##     the character under the cursor (in Unicode format: U+xxxx), the same
##     flags as are shown by set stateflags, and a percentage that expresses
##     how far the cursor is into the file (linewise).
## When a file is loaded or saved, and also when switching between buffers,
##     the number of lines in the buffer is displayed after the filename.
## This number is cleared upon the next keystroke, or replaced with an [i/n]
##     counter when multiple buffers are open.
## The line plus column numbers and the character code are displayed only when
##     set constantshow is used, and can be toggled on and off with M-C.
## The state flags are displayed only when set stateflags is used.
set minibar

## Enable mouse support, if available for your system.
## When enabled, mouse clicks can be used to place the cursor,
##     set the mark (with a double click), and execute shortcuts.
## The mouse will work in the X Window System, and on the console
##     when gpm is running.
## Text can still be selected through dragging by holding down the Shift key.
# set mouse

## Switch on multiple file buffers (inserting a file will put it into
##     a separate buffer).
## When reading in a file with ^R, insert it into a new buffer by default.
# set multibuffer

## Don’t convert files from DOS/Mac format.
# set noconvert

## Don’t display the two help lines (shortcut lists) at the bottom of
##     the screen.
# set nohelp

## Don’t automatically add a newline when a text does not end with one.
## (This can cause you to save non-POSIX text files.)
# set nonewlines

## Set operating directory.  nano will not read or write files outside
##     this directory and its subdirectories.
## Also, the current directory is changed to here, so any files are inserted
##     from this dir.
## A blank string means the operating-directory feature is turned off.
## By default, the operating directory feature is turned off.
# set operatingdir directory
# set operatingdir ""

## Save the cursor position of files between editing sessions.
## The cursor position is remembered for the 200 most-recently edited files.
# set positionlog

## Preserve the XON and XOFF keys (^Q and ^S).
# set preserve

## Set the characters treated as closing punctuation when justifying paragraphs.
## This may not include blank characters. Only the specfified closing
##     punctuation, optionally followed by closing brackets (see brackets),
##     can end sentences.
# set punct "characters"
## Default:
# set punct "!.?"

## Make status-bar messages disappear after 1 keystroke instead of after 20.
## Note that option constantshow overrides this.
## When option minibar or zero is in effect, quickblank makes a message
##     disappear after 0.8 seconds instead of after the default 1.5 seconds.
# set quickblank

## Set the regular expression for matching the quoting part of a line.
## This makes it possible to rejustify blocks of quoted text when composing
##     email, and to rewrap blocks of line comments when writing source code.
# set quotestr "regex"
## Default: (Note that \t stands for an actual Tab character.)
# set quotestr "^([ \t]*([!#%:;>|}]|//))+"
# set quotestr "^([ 	]*([!#%:;>|}]|//))+"

## Try to work around a mismatching terminfo terminal description.
## Interpret escape sequences directly, instead of asking ncurses to translate
##     them.
## (If you need this option to get some keys to work properly, it means that
##     the terminfo terminal description that is used does not fully match the
##     actual behavior of your terminal.
## This can happen when you ssh into a BSD machine, for example.)
## Using this option disables nano’s mouse support.
# set rawsequences

## Save a changed buffer automatically on exit (^X); don’t prompt.
## (The old form of this option, 'set tempfile', is deprecated.)
# set saveonexit

## Put the cursor on the highlighted item in the file browser, and show
##     the cursor in the help viewer; useful for people who use
##     a braille display and people with poor vision.
# set showcursor

## Make the Home key smarter. When Home is pressed anywhere but at the very
##     beginning of non-whitespace characters on a line, the cursor will jump to
##     that beginning (either forwards or backwards).
## If the cursor is already at that position, it will jump to the
##     true beginning of the line (the left edge).
# set smarthome

## Use the given program to do spell checking and correcting,
##     instead of using the built-in corrector that calls
##     hunspell(1) or spell(1).
## This option does not have a default value.
# set speller "program [argument ...]"
# set speller "aspell -x -c"

## Use the top-right corner of the screen (the end of the title bar)
##     for showing some state flags:
##     I = auto-indenting
##     M = when the mark is on
##     L = hard-wrapping (breaking long lines)
##     R = recording a macro
##     S = soft-wrapping
## When the buffer is modified, a star (*) is shown after the filename in the
##     center of the title bar.
set stateflags

## Use a tab size of number columns. The value of number must be greater than 0.
## The default value is 8.
# set tabsize number
# set tabsize 8
set tabsize 4

## Convert each typed tab to spaces -- to the number of spaces that a tab at
##     that position would take up.
# set tabstospaces

## Remove trailing whitespace from wrapped lines when automatic hard-wrapping
##     occurs or when text is justified.
# set trimblanks

## Save a file by default in Unix format (also when they were DOS or Mac).
## This overrides nano’s default behavior of saving a file in the format that
##     it had.
## (This option has no effect when you also use set noconvert.)
# set unix

## The two single-column characters used to display the first characters
##     of tabs and spaces.  187 in ISO 8859-1 (0000BB in Unicode) and 183 in
##     ISO-8859-1 (0000B7 in Unicode) seem to be good values for these.
## The default when in a UTF-8 locale:
# set whitespace "»·"
## The default otherwise:
# set whitespace ">."

## Detect word boundaries differently by treating punctuation characters as
##     parts of words.
# set wordbounds

## Specify which other characters (besides the normal alphanumeric ones) should
##     be considered as parts of words. This option does not have a
##     default value.
## When using this option, you probably want to unset wordbounds.
## When set, it overrides option 'set wordbounds'.
# set wordchars "characters"
# set wordchars "<_>."

## Let an unmodified Backspace or Delete erase the marked region (instead of a
##     single character, and without affecting the cutbuffer).
# set zap

## Hide all elements of the interface (title bar, status bar, and help lines)
##     and use all rows of the terminal for showing the contents of the buffer.
## The status bar appears only when there is a significant message, and
##     disappears after 1.5 seconds or upon the next keystroke. With M-Z
##     the title bar plus status bar can be toggled. With M-X the help lines.
# set zero

## =============================================================================
## OPTIONS - BACKUP
## =============================================================================

## When backing up files, allow the backup to succeed even if its permissions
##     can’t be (re)set due to special OS considerations.
## You should NOT enable this option unless you are sure you need it.
# set allow_insecure_backup

## When saving a file, create a backup file by adding a tilde (~)
##     to the file’s name.
# set backup

## Make and keep not just one backup file, but make and keep a uniquely
##     numbered one every time a file is saved -- when backups are enabled
##     with set backup or --backup or -B.
## The uniquely numbered files are stored in the specified directory.
# set backupdir directory
# set backupdir ""

## =============================================================================
## OPTIONS - LINE WRAPPING
## =============================================================================

## When soft line wrapping is enabled, make it wrap lines at blank characters
## (tabs and spaces) instead of always at the edge of the screen.
set atblanks

## Automatically hard-wrap the current line when it becomes overlong.
# set breaklonglines

## Set the target width for justifying and automatic hard-wrapping
##     at this number of columns.
## If the value is 0 or less, wrapping will occur at the width of the screen
##     minus number columns, allowing the wrap point to vary along with
##     the width of the screen if the screen is resized.
## The default value is -8.
# set fill number
# set fill -8

## Deprecated option since it has become the default setting.
## When needed, use unset breaklonglines instead.
# set nowrap

## Display lines that exceed the screen’s width over multiple screen lines.
## (You can make this soft-wrapping occur at whitespace instead of rudely at
## the screen’s edge, by using also set atblanks.)
set softwrap

## =============================================================================
## OPTIONS - SEARCH
## =============================================================================

## Do case-sensitive searches by default.
# set casesensitive

## Do regular-expression searches by default.
## Regular expressions in nano are of the extended type (ERE).
# set regexp

## =============================================================================
## COLORS
## =============================================================================

## Paint the interface elements of nano.
## These are examples;
## there are no colors by default, except for errorcolor and spotlightcolor.
# set titlecolor bold,white,blue
# set promptcolor lightwhite,grey
# set statuscolor bold,white,green
# set errorcolor bold,white,red
# set spotlightcolor black,lightyellow
# set selectedcolor lightwhite,magenta
# set stripecolor ,yellow
# set scrollercolor cyan
# set numbercolor cyan
# set keycolor cyan
# set functioncolor green

## In root's .nanorc you might want to use:
# set titlecolor bold,white,magenta
# set promptcolor black,yellow
# set statuscolor bold,white,magenta
# set errorcolor bold,white,red
# set spotlightcolor black,orange
# set selectedcolor lightwhite,cyan
# set stripecolor ,yellow
# set scrollercolor magenta
# set numbercolor magenta
# set keycolor lightmagenta
# set functioncolor magenta

## Use bold instead of reverse video for the title bar, status bar, key combos,
##     function tags, line numbers, and selected text. This can be overridden
##     by setting the options titlecolor, statuscolor, keycolor, functioncolor,
##     numbercolor, and selectedcolor.
# set boldtext

## Use this color combination for the status bar when an error message is
##     displayed.
## The default value is bold,white,red. See set titlecolor for
##     valid color names.
# set errorcolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the concise function descriptions in the
##     two help lines at the bottom of the screen. See set titlecolor
##     for more details.
# set functioncolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the shortcut key combos in the two help lines
##     at the bottom of the screen. See set titlecolor for more details.
# set keycolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the minibar. (When this option is
##     not specified, the colors of the title bar are used.)
## See set titlecolor for more details.
# set minicolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for line numbers. See set titlecolor for
##     more details.
# set numbercolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the prompt bar.
## (When this option is not specified, the colors of the title bar are used.)
## See set titlecolor for more details.
# set promptcolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the indicator alias "scrollbar".
## (On terminal emulators that link to a libvte older than version 0.55,
##     using a background color here does not work correctly.)
## See set titlecolor for more details.
# set scrollercolor fgcolor,bgcolor

## Use this color combination for selected text.
## See set titlecolor for more details.
# set selectedcolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for highlighting a search match.
## The default value is black,lightyellow.
## See set titlecolor for valid color names.
# set spotlightcolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the status bar.
## See set titlecolor for more details.
# set statuscolor [bold,][italic,]fgcolor,bgcolor

## Use this color combination for the vertical guiding stripe.
## See set titlecolor for more details.
# set stripecolor [bold,][italic,]fgcolor,bgcolor


## Use this color combination for the title bar.
## Valid names for the foreground and background colors are:
##     red, green, blue, magenta, yellow, cyan, white, and black.
## Each of these eight names may be prefixed with the word light to get
##     a brighter version of that color.
## The word grey or gray may be used as a synonym for lightblack.
## On terminal emulators that can do at least 256 colors, other valid
##     (but unprefixable) color names are: pink, purple, mauve, lagoon, mint,
##     lime, peach, orange, latte, rosy, beet, plum, sea, sky, slate, teal,
##     sage, brown, ocher, sand, tawny, brick, crimson, and normal --
##     where normal means the default foreground or background color.
## On such emulators, the color may also be specified as a three-digit
##     hexadecimal number prefixed with #, with the digits representing
##     the amounts of red, green, and blue, respectively.
## This tells nano to select from the available palette the color that
##     approximates the given values.

## Either "fgcolor" or ",bgcolor" may be left out, and the pair may be preceded by bold and/or italic (separated by commas) to get a bold and/or slanting typeface, if your terminal can do those.

# set titlecolor [bold,][italic,]fgcolor,bgcolor

## =============================================================================
## COLORS - SYNTAX
## =============================================================================

## === Syntax coloring ===
## For all details, see 'man nanorc', section SYNTAX HIGHLIGHTING.

## To include most of the existing syntax definitions, you can do:
include "/usr/share/nano/*.nanorc"

## Or you can select just the ones you need.  For example:
# include "/usr/share/nano/html.nanorc"
# include "/usr/share/nano/python.nanorc"
# include "/usr/share/nano/sh.nanorc"

## In /usr/share/nano/extra/ you can find some syntaxes that are
##     specific for certain distros or for some less common languages.


## If <Tab> should always produce four spaces when editing a Python file,
##     independent of the settings of 'tabsize' and 'tabstospaces':
extendsyntax python tabgives "    "

## If <Tab> should always produce an actual TAB when editing a Makefile:
extendsyntax makefile tabgives "	"

# ==============================================================================
# KEY BINDINGS
# ==============================================================================

## Fix Backspace/Delete confusion problem.
## Interpret the Delete and Backspace keys differently so that both
##     Backspace and Delete work properly. You should only use this option
##     when on your system either Backspace acts like Delete or
##     Delete acts like Backspace.
# set rebinddelete

## === Key bindings ===
## For all details, see 'man nanorc', section REBINDING KEYS.

## If you want to suspend nano with one keystroke (instead of with ^T^Z):
# bind ^Z suspend main

## The <Ctrl+Delete> keystroke deletes the word to the right of the cursor.
## On some terminals the <Ctrl+Backspace> keystroke produces ^H, which is
##     the ASCII character for backspace, so it is bound by default to the
##     backspace function.
## The <Backspace> key itself produces a different keycode, which is hard-bound
##     to the backspace function.
## So, if you normally use <Backspace> for backspacing and not ^H, you can make
##     <Ctrl+Backspace> delete the word to the left of the cursor with:
# bind ^H chopwordleft main

## For a more mnemonic Comment keystroke (overriding Cut-from-cursor):
# bind M-K comment main

## If you want ^L to just refresh the screen and not center the cursor:
# bind ^L refresh main

## When you sometimes type M-J instead of M-K, or M-T instead of M-R:
# unbind M-J main
# unbind M-T main
## (Those functions are still accessible through ^T^J and ^T^V.)

## For quickly uppercasing or lowercasing the word under the cursor.
## (These effectively do a Ctrl+Right followed by a Shift+Ctrl+Left,
##     and then pipe the selected text through a sed command.)
# bind Sh-M-U "Oc[1;6D|sed 's/.*/\U&/'
# " main
# bind Sh-M-L "Oc[1;6D|sed 's/.*/\L&/'
# " main

## For copying a marked region to the system clipboard:
# bind Sh-M-T "|xsel -ib
# u" main

## If you would like nano to have keybindings that are more "usual",
##     such as ^O for Open, ^F for Find, ^H for Help, and ^Q for Quit,
##     then uncomment these:
#bind ^X cut main
#bind ^C copy main
#bind ^V paste all
#bind ^Q exit all
#bind ^S savefile main
#bind ^W writeout main
#bind ^O insert main
#set multibuffer
#bind ^H help all
#bind ^H exit help
#bind ^F whereis all
#bind ^G findnext all
#bind ^B wherewas all
#bind ^D findprevious all
#bind ^R replace main
#bind ^Z undo main
#bind ^Y redo main
#unbind ^K main
#unbind ^U all
#unbind ^N main
#unbind ^Y all
#unbind M-J main
#unbind M-T main
#bind ^A mark main
#bind ^P location main
#bind ^T gotoline main
#bind ^T gotodir browser
#bind ^T cutrestoffile execute
#bind ^L linter execute
#bind ^E execute main

